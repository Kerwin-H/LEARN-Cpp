/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public: 
    int sum(TreeNode* root, int num){
        if(root == NULL) return 0;
        
        num = num * 10 + root -> val;
        if(root -> left == NULL && root -> right == NULL) return num;
        return sum(root -> left, num) + sum(root -> right, num);
    }
    int sumNumbers(TreeNode* root) {
        return sum(root, 0);
    }
};


class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if (head == nullptr) return nullptr;
        ListNode *slow = head, *fast = head;
        do {
            if (fast->next && fast->next->next){
                fast = fast->next->next;
                slow = slow->next;
            } else {
                return nullptr;
            }
        } while (fast != slow);
        
        fast = head;
        
        while(fast != slow) {
            fast = fast->next;
            slow = slow->next;
        }
        return slow;
    }
};
